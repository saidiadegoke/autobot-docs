"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[780],{5412:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var t=s(4848),i=s(8453);const o={},r=void 0,d={id:"autobot-admin/client-node-package/utilities",title:"utilities",description:"Documentation for NodeStatusesEnum and ThinClientDBResult",source:"@site/docs/autobot-admin/client-node-package/utilities.md",sourceDirName:"autobot-admin/client-node-package",slug:"/autobot-admin/client-node-package/utilities",permalink:"/autobot-docs/docs/autobot-admin/client-node-package/utilities",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/client-node-package/utilities.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"services",permalink:"/autobot-docs/docs/autobot-admin/client-node-package/services"},next:{title:"overview",permalink:"/autobot-docs/docs/autobot-admin/exam-package/overview"}},c={},l=[{value:"Documentation for <code>NodeStatusesEnum</code> and <code>ThinClientDBResult</code>",id:"documentation-for-nodestatusesenum-and-thinclientdbresult",level:3},{value:"<strong><code>NodeStatusesEnum</code></strong>",id:"nodestatusesenum",level:4},{value:"<strong>Example Usage</strong>:",id:"example-usage",level:5},{value:"<strong><code>ThinClientDBResult</code></strong>",id:"thinclientdbresult",level:4},{value:"<strong>Example Usage</strong>:",id:"example-usage-1",level:5}];function a(e){const n={code:"code",h3:"h3",h4:"h4",h5:"h5",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h3,{id:"documentation-for-nodestatusesenum-and-thinclientdbresult",children:["Documentation for ",(0,t.jsx)(n.code,{children:"NodeStatusesEnum"})," and ",(0,t.jsx)(n.code,{children:"ThinClientDBResult"})]}),"\n",(0,t.jsxs)(n.p,{children:["This document provides an overview of the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"NodeStatusesEnum"})})," and ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ThinClientDBResult"})})," classes used in the ",(0,t.jsx)(n.code,{children:"autobot.app.admin.clientnode"})," package."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"nodestatusesenum",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"NodeStatusesEnum"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": Enum that defines the possible statuses of a client node in the system."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Values"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"CONNECTED"})}),": Represents a client node that is currently connected to the system."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"DISCONNECTED"})}),": Represents a client node that is currently disconnected from the system."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Case"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'This enum is used to track and manage the status of nodes in the system. For example, a node might be marked as "DISCONNECTED" during system shutdown or network issues and "CONNECTED" when it successfully registers with the system.'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h5,{id:"example-usage",children:[(0,t.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"NodeStatusesEnum status = NodeStatusesEnum.CONNECTED;\nif (status == NodeStatusesEnum.DISCONNECTED) {\n    // Handle disconnected state\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"thinclientdbresult",children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ThinClientDBResult"})})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Purpose"}),": A data object (DTO) used to represent the result of a database query that counts the occurrences of IP addresses among the client nodes."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Fields"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ipAddress"})}),": The IP address of the client node."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"count"})}),": The number of occurrences of the IP address (i.e., how many nodes are using this IP)."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Constructors"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No-Arg Constructor"}),": Initializes an empty ",(0,t.jsx)(n.code,{children:"ThinClientDBResult"})," object."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All-Args Constructor"}),": Initializes a ",(0,t.jsx)(n.code,{children:"ThinClientDBResult"})," object with both ",(0,t.jsx)(n.code,{children:"ipAddress"})," and ",(0,t.jsx)(n.code,{children:"count"}),"."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Annotations"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@Data"})}),": Lombok annotation that generates standard methods such as getters, setters, ",(0,t.jsx)(n.code,{children:"toString()"}),", ",(0,t.jsx)(n.code,{children:"equals()"}),", and ",(0,t.jsx)(n.code,{children:"hashCode()"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@AllArgsConstructor"})}),": Generates a constructor with arguments for all fields (",(0,t.jsx)(n.code,{children:"ipAddress"}),", ",(0,t.jsx)(n.code,{children:"count"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@NoArgsConstructor"})}),": Generates a no-argument constructor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"@Getter"})," and ",(0,t.jsx)(n.code,{children:"@Setter"})]}),": Additional Lombok annotations to automatically generate getter and setter methods."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h5,{id:"example-usage-1",children:[(0,t.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'ThinClientDBResult result = new ThinClientDBResult("192.168.1.10", 5);\nSystem.out.println("IP Address: " + result.getIpAddress() + ", Count: " + result.getCount());\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var t=s(6540);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);