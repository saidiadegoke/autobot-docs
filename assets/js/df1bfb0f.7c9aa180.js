"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[3502],{1402:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>a,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var i=s(4848),t=s(8453);const o={},r=void 0,d={id:"autobot-admin/client-node-package/repository",title:"repository",description:"Documentation: ClientNodeRepository Interface",source:"@site/docs/autobot-admin/client-node-package/repository.md",sourceDirName:"autobot-admin/client-node-package",slug:"/autobot-admin/client-node-package/repository",permalink:"/autobot-docs/docs/autobot-admin/client-node-package/repository",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/client-node-package/repository.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"dtos",permalink:"/autobot-docs/docs/autobot-admin/client-node-package/dtos"},next:{title:"services",permalink:"/autobot-docs/docs/autobot-admin/client-node-package/services"}},l={},c=[{value:"Documentation: <code>ClientNodeRepository</code> Interface",id:"documentation-clientnoderepository-interface",level:3},{value:"<strong>Interface Declaration</strong>",id:"interface-declaration",level:4},{value:"<strong>Custom Query Methods</strong>",id:"custom-query-methods",level:4},{value:"<strong>Custom Queries</strong>",id:"custom-queries",level:4},{value:"Summary of Key Functionalities:",id:"summary-of-key-functionalities",level:3}];function h(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h3,{id:"documentation-clientnoderepository-interface",children:["Documentation: ",(0,i.jsx)(n.code,{children:"ClientNodeRepository"})," Interface"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"ClientNodeRepository"})," interface extends Spring Data JPA's ",(0,i.jsx)(n.code,{children:"JpaRepository"})," and ",(0,i.jsx)(n.code,{children:"JpaSpecificationExecutor"})," interfaces, providing CRUD operations and query execution for the ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"}),". This repository handles database operations related to client nodes, including custom query methods and batch updates."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"interface-declaration",children:(0,i.jsx)(n.strong,{children:"Interface Declaration"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"public interface ClientNodeRepository extends JpaRepository<ClientNodeEntity, Long>, JpaSpecificationExecutor<ClientNodeEntity> {\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"JpaRepository<ClientNodeEntity, Long>"})}),": Provides standard CRUD operations (e.g., ",(0,i.jsx)(n.code,{children:"save()"}),", ",(0,i.jsx)(n.code,{children:"findAll()"}),", ",(0,i.jsx)(n.code,{children:"deleteById()"}),") for the ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"}),". The primary key is of type ",(0,i.jsx)(n.code,{children:"Long"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"JpaSpecificationExecutor<ClientNodeEntity>"})}),": Enables execution of dynamic queries using specifications, allowing for more complex filtering and querying."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"custom-query-methods",children:(0,i.jsx)(n.strong,{children:"Custom Query Methods"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ClientNodeEntity findByIpAddress(String ipAddress);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Finds a ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"})," based on the node's ",(0,i.jsx)(n.code,{children:"ipAddress"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A single ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"})," matching the provided IP address."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"ClientNodeEntity findByNodeUUID(String nodeUUID);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Retrieves a ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"})," by its unique ",(0,i.jsx)(n.code,{children:"nodeUUID"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The entity that matches the given ",(0,i.jsx)(n.code,{children:"nodeUUID"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"long countAllByNetSpeedLongLessThan(Long value);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Counts how many client nodes have a network speed (",(0,i.jsx)(n.code,{children:"netSpeedLong"}),") lower than a specified value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The number of nodes where ",(0,i.jsx)(n.code,{children:"netSpeedLong"})," is below the given value."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"long countAllByMemSizeLessThan(Long value);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Counts how many client nodes have a memory size (",(0,i.jsx)(n.code,{children:"memSize"}),") less than a specified value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The number of nodes with memory size below the given value."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"long countAllByMemSizeTotalAvailableLessThan(Long value);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Counts how many client nodes have a total available memory (",(0,i.jsx)(n.code,{children:"memSizeTotalAvailable"}),") less than a specified value."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The number of nodes with available memory below the given value."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"long countAllByUuidThinIdIsNotNull();"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Counts all nodes that have a non-null ",(0,i.jsx)(n.code,{children:"uuidThinId"}),". This method is used to find how many nodes have a valid thin client UUID."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The count of nodes with a non-null ",(0,i.jsx)(n.code,{children:"uuidThinId"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"long countAllByStatus(String status);"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Counts all nodes that match the provided ",(0,i.jsx)(n.code,{children:"status"}),' (e.g., "CONNECTED", "DISCONNECTED").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": The number of nodes with the given status."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"custom-queries",children:(0,i.jsx)(n.strong,{children:"Custom Queries"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:'@Query("SELECT ipAddress, count(1) as count FROM ClientNodeEntity GROUP BY ipAddress")'})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": A custom query to count the occurrences of client nodes by their IP addresses."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A list of ",(0,i.jsx)(n.code,{children:"ThinClientDBResult"})," objects that contain each unique IP address and the count of nodes with that IP."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"@Transactional @Modifying @Query(\"UPDATE ClientNodeEntity e SET e.status='DISCONNECTED'\")"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": This query updates the ",(0,i.jsx)(n.code,{children:"status"})," field of all ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"})," records, setting their status to ",(0,i.jsx)(n.code,{children:'"DISCONNECTED"'}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Annotations"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"@Transactional"})}),": Ensures that the operation is executed within a transactional context."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"@Modifying"})}),": Indicates that this query is modifying data (i.e., performing an ",(0,i.jsx)(n.code,{children:"UPDATE"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": Nothing (void)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"summary-of-key-functionalities",children:"Summary of Key Functionalities:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Standard CRUD Operations"}),": By extending ",(0,i.jsx)(n.code,{children:"JpaRepository"}),", this repository automatically inherits the standard operations for working with ",(0,i.jsx)(n.code,{children:"ClientNodeEntity"})," objects, such as saving, deleting, and finding entities."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Custom Query Methods"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The repository includes methods for finding entities by IP address and ",(0,i.jsx)(n.code,{children:"nodeUUID"}),", as well as counting nodes based on network speed, memory size, and status."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Batch Update"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"setAllAsDisconnected()"})," method allows for batch updating of the ",(0,i.jsx)(n.code,{children:"status"}),' field, marking all nodes as "DISCONNECTED". This is useful for resetting the status of nodes, such as during a system reboot or restart.']}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Custom Grouped Query"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"countByIPAddress()"})," query groups client nodes by their IP address and returns the count for each unique IP. This is useful for detecting IP address conflicts or tracking node distribution by network."]}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>d});var i=s(6540);const t={},o=i.createContext(t);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);