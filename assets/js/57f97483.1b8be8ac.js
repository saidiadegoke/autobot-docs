"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[1106],{3514:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var s=r(4848),t=r(8453);const i={},o=void 0,l={id:"autobot-admin/center-package/overview",title:"overview",description:"Structure Overview of autobot.app.admin.center",source:"@site/docs/autobot-admin/center-package/overview.md",sourceDirName:"autobot-admin/center-package",slug:"/autobot-admin/center-package/overview",permalink:"/autobot-docs/docs/autobot-admin/center-package/overview",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/center-package/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"center-service",permalink:"/autobot-docs/docs/autobot-admin/center-package/center-service"},next:{title:"utilities",permalink:"/autobot-docs/docs/autobot-admin/center-package/utilities"}},c={},a=[{value:"Structure Overview of <code>autobot.app.admin.center</code>",id:"structure-overview-of-autobotappadmincenter",level:3},{value:"1. <strong>CenterController</strong>",id:"1-centercontroller",level:3},{value:"2. <strong>CenterControllerHome</strong>",id:"2-centercontrollerhome",level:3},{value:"3. <strong>CenterDetailsDTO</strong>",id:"3-centerdetailsdto",level:3},{value:"4. <strong>CenterDetailsServerDTO</strong>",id:"4-centerdetailsserverdto",level:3},{value:"5. <strong>CenterEntity</strong>",id:"5-centerentity",level:3},{value:"6. <strong>CenterReportResponseDTO</strong>",id:"6-centerreportresponsedto",level:3},{value:"7. <strong>CenterRepository</strong>",id:"7-centerrepository",level:3},{value:"8. <strong>CenterService</strong>",id:"8-centerservice",level:3},{value:"9. <strong>CenterServiceImpl</strong>",id:"9-centerserviceimpl",level:3},{value:"10. <strong>ComputerRecordDTO</strong>",id:"10-computerrecorddto",level:3},{value:"11. <strong>ComputerReportResponseDTO</strong>",id:"11-computerreportresponsedto",level:3},{value:"12. <strong>ExamRecordDTO</strong>",id:"12-examrecorddto",level:3},{value:"13. <strong>ExamReportResponseDTO</strong>",id:"13-examreportresponsedto",level:3},{value:"14. <strong>PreloadDatabase</strong>",id:"14-preloaddatabase",level:3},{value:"15. <strong>VerifyCenterRequest</strong>",id:"15-verifycenterrequest",level:3},{value:"How These Components Work Together",id:"how-these-components-work-together",level:3}];function d(e){const n={code:"code",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h3,{id:"structure-overview-of-autobotappadmincenter",children:["Structure Overview of ",(0,s.jsx)(n.code,{children:"autobot.app.admin.center"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"autobot.app.admin.center"})," package, as shown in the image, is a core part of the ",(0,s.jsx)(n.strong,{children:"AutoBot Admin"})," application. It handles the functionality related to ",(0,s.jsx)(n.strong,{children:"managing exam centers"})," within the application. This structure includes various components, such as controllers, data transfer objects (DTOs), services, and repositories, which work together to manage center-related operations like retrieving center details, managing reports, and verifying exam centers."]}),"\n",(0,s.jsx)(n.p,{children:"Below is a detailed description of each component shown in the structure:"}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"1-centercontroller",children:["1. ",(0,s.jsx)(n.strong,{children:"CenterController"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Spring MVC Controller (",(0,s.jsx)(n.code,{children:"@RestController"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Handles incoming HTTP requests related to center operations. It exposes endpoints to retrieve center details, verify reference numbers, manage reports, and perform other center-specific tasks."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Retrieve center details."}),"\n",(0,s.jsx)(n.li,{children:"Verify center reference numbers."}),"\n",(0,s.jsx)(n.li,{children:"Handle operations related to computer and exam reports for a center."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-centercontrollerhome",children:["2. ",(0,s.jsx)(n.strong,{children:"CenterControllerHome"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Spring MVC Controller (",(0,s.jsx)(n.code,{children:"@Controller"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": This is likely a controller that serves view-related requests. It may handle basic navigation or home views related to centers in the web application."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manage navigation or basic view rendering related to centers."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-centerdetailsdto",children:["3. ",(0,s.jsx)(n.strong,{children:"CenterDetailsDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the data structure for center details that will be transferred between layers (e.g., service and controller)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encapsulate center details such as center name, location, and other relevant attributes for easy transmission over the network."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-centerdetailsserverdto",children:["4. ",(0,s.jsx)(n.strong,{children:"CenterDetailsServerDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Likely represents center details specifically required on the server side for certain operations, potentially involving backend server logic."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Server-side data structure that may include additional attributes or metadata not exposed in the ",(0,s.jsx)(n.code,{children:"CenterDetailsDTO"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"5-centerentity",children:["5. ",(0,s.jsx)(n.strong,{children:"CenterEntity"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": JPA Entity (",(0,s.jsx)(n.code,{children:"@Entity"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the center as a database entity. It is mapped to a database table where exam center data is stored."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Model the structure of the center database table."}),"\n",(0,s.jsx)(n.li,{children:"Manage persistence operations via the repository layer."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"6-centerreportresponsedto",children:["6. ",(0,s.jsx)(n.strong,{children:"CenterReportResponseDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the data structure for responses related to center reports. This could include exam center reports, computer reports, or performance reports."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encapsulate report data and metadata, which are sent back to clients after a report-related request."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"7-centerrepository",children:["7. ",(0,s.jsx)(n.strong,{children:"CenterRepository"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Spring Data JPA Repository (",(0,s.jsx)(n.code,{children:"@Repository"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Provides an abstraction over the database, allowing for CRUD (Create, Read, Update, Delete) operations on center-related data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Interact with the ",(0,s.jsx)(n.code,{children:"CenterEntity"})," to perform database operations."]}),"\n",(0,s.jsx)(n.li,{children:"Manage queries and database transactions for center-related data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"8-centerservice",children:["8. ",(0,s.jsx)(n.strong,{children:"CenterService"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Service Interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Defines the operations that can be performed on centers. The service layer is responsible for handling the business logic and connecting the controller and repository layers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Define methods for retrieving center details, verifying reference numbers, managing reports, and other center-specific operations."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"9-centerserviceimpl",children:["9. ",(0,s.jsx)(n.strong,{children:"CenterServiceImpl"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Service Implementation (",(0,s.jsx)(n.code,{children:"@Service"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Provides the concrete implementation of the ",(0,s.jsx)(n.code,{children:"CenterService"})," interface. It includes the actual logic for managing centers and processing requests from the controller."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement business logic for center operations like retrieving details, verifying reference numbers, and managing reports."}),"\n",(0,s.jsx)(n.li,{children:"Call the repository to interact with the database for center-related queries."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"10-computerrecorddto",children:["10. ",(0,s.jsx)(n.strong,{children:"ComputerRecordDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the data structure for an individual computer record related to the center. This could include information about computers used in exam centers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encapsulate computer-specific data like performance, status, and configuration in the context of an exam center."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"11-computerreportresponsedto",children:["11. ",(0,s.jsx)(n.strong,{children:"ComputerReportResponseDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the structure of the response when retrieving computer-related reports from the center. This could involve various metrics and logs generated by the computers at an exam center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide an organized structure for returning computer report data to the client."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"12-examrecorddto",children:["12. ",(0,s.jsx)(n.strong,{children:"ExamRecordDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the exam-specific data related to a center. This could include details like exam schedules, status, and candidate performance."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encapsulate exam-related data and serve as a transfer object between different layers of the application."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"13-examreportresponsedto",children:["13. ",(0,s.jsx)(n.strong,{children:"ExamReportResponseDTO"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Data Transfer Object (DTO)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the structure of the response when retrieving exam reports. These reports may include overall exam results, status, and logs for a particular exam conducted at a center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide an organized structure for returning exam report data to the client."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"14-preloaddatabase",children:["14. ",(0,s.jsx)(n.strong,{children:"PreloadDatabase"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Utility Class or Service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Likely used for preloading or seeding the database with initial data during application startup or testing. This could be useful for setting up initial center data."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Preload exam center data into the database when the application starts."}),"\n",(0,s.jsx)(n.li,{children:"Facilitate testing and development by providing default center data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"15-verifycenterrequest",children:["15. ",(0,s.jsx)(n.strong,{children:"VerifyCenterRequest"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type"}),": Request DTO"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Represents the request payload used when verifying a center\u2019s reference number. This object would likely be passed as part of the request body in the ",(0,s.jsx)(n.code,{children:"verifyCenterReference"})," API call."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Key Responsibilities"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Capture and transfer the reference number (or other identifiers) when verifying if a center is valid."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"how-these-components-work-together",children:"How These Components Work Together"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Controller Layer"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CenterController"})," and ",(0,s.jsx)(n.code,{children:"CenterControllerHome"})," act as the entry points for HTTP requests related to exam centers. They handle requests like retrieving center details, uploading reports, verifying references, and responding with appropriate data or error messages."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Service Layer"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CenterService"})," and ",(0,s.jsx)(n.code,{children:"CenterServiceImpl"})," provide the business logic for handling operations requested by the controller. The service calls the repository layer to interact with the database when necessary."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Repository Layer"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CenterRepository"})," interacts with the database to perform CRUD operations on center data stored in the ",(0,s.jsx)(n.code,{children:"CenterEntity"}),". This repository abstracts the database interactions, allowing the service to focus on business logic."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Data Transfer Layer"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["DTOs like ",(0,s.jsx)(n.code,{children:"CenterDetailsDTO"}),", ",(0,s.jsx)(n.code,{children:"ComputerReportResponseDTO"}),", and ",(0,s.jsx)(n.code,{children:"ExamReportResponseDTO"})," act as intermediaries, ensuring that data is transferred efficiently between the server and the client. They also decouple the internal database structure from the external API representation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Database Management"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"CenterEntity"})," represents the structure of center-related data in the database. ",(0,s.jsx)(n.code,{children:"PreloadDatabase"})," could be responsible for initializing the database with default values or test data."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Request-Response Mechanism"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Request DTOs like ",(0,s.jsx)(n.code,{children:"VerifyCenterRequest"})," encapsulate the data required for incoming requests, while response DTOs like ",(0,s.jsx)(n.code,{children:"CenterReportResponseDTO"})," encapsulate the data returned to the client after processing."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);