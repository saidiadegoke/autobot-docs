"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[2356],{5350:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=t(4848),r=t(8453);const i={},a=void 0,o={id:"autobot-admin/center-package/center-entity",title:"center-entity",description:'The CenterEntity class represents a database entity that maps to a table for storing information related to a "Center" in the system. It\'s using JPA (Java Persistence API) annotations to define its structure and behavior in the database. Below is an in-depth explanation of the class:',source:"@site/docs/autobot-admin/center-package/center-entity.md",sourceDirName:"autobot-admin/center-package",slug:"/autobot-admin/center-package/center-entity",permalink:"/autobot-docs/docs/autobot-admin/center-package/center-entity",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/center-package/center-entity.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"center-dtos",permalink:"/autobot-docs/docs/autobot-admin/center-package/center-dtos"},next:{title:"center-repository",permalink:"/autobot-docs/docs/autobot-admin/center-package/center-repository"}},c={},d=[{value:"Code Breakdown:",id:"code-breakdown",level:3},{value:"1. <strong>Package Declaration:</strong>",id:"1-package-declaration",level:4},{value:"2. <strong>Imports:</strong>",id:"2-imports",level:4},{value:"3. <strong>Class-Level Annotations and Declaration:</strong>",id:"3-class-level-annotations-and-declaration",level:4},{value:"4. <strong>Fields and Annotations:</strong>",id:"4-fields-and-annotations",level:4},{value:"5. <strong>Automatic Timestamps:</strong>",id:"5-automatic-timestamps",level:4}];function l(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"CenterEntity"}),' class represents a database entity that maps to a table for storing information related to a "Center" in the system. It\'s using JPA (Java Persistence API) annotations to define its structure and behavior in the database. Below is an in-depth explanation of the class:']}),"\n",(0,s.jsx)(n.h3,{id:"code-breakdown",children:"Code Breakdown:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package autobot.app.admin.center;\n\nimport lombok.Getter;\nimport lombok.NonNull;\nimport lombok.Setter;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.util.Date;\n\n@Entity\n@Getter @Setter\npublic class CenterEntity {\n    @NonNull\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    private String centerName;\n    private String uuid;\n    private String referenceNumber;\n    private String state;\n    private String address;\n    private String town;\n    private String status;\n    private int capacity;\n    private int backupCapacity;\n\n    @CreationTimestamp\n    private Date createdAt;\n\n    @UpdateTimestamp\n    private Date updatedAt;\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"1-package-declaration",children:["1. ",(0,s.jsx)(n.strong,{children:"Package Declaration:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"package autobot.app.admin.center;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["This indicates that the ",(0,s.jsx)(n.code,{children:"CenterEntity"})," class belongs to the ",(0,s.jsx)(n.code,{children:"autobot.app.admin.center"})," package, where all center-related entities, repositories, and services are stored."]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"2-imports",children:["2. ",(0,s.jsx)(n.strong,{children:"Imports:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"import lombok.Getter;\nimport lombok.NonNull;\nimport lombok.Setter;\nimport org.hibernate.annotations.CreationTimestamp;\nimport org.hibernate.annotations.UpdateTimestamp;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.util.Date;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Lombok Annotations"})," (",(0,s.jsx)(n.code,{children:"@Getter"}),", ",(0,s.jsx)(n.code,{children:"@Setter"}),", ",(0,s.jsx)(n.code,{children:"@NonNull"}),"): These annotations are part of Project Lombok, which helps reduce boilerplate code. ",(0,s.jsx)(n.code,{children:"@Getter"})," and ",(0,s.jsx)(n.code,{children:"@Setter"})," automatically generate getter and setter methods for the fields in the class. ",(0,s.jsx)(n.code,{children:"@NonNull"})," enforces non-null values for the annotated fields."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Hibernate Annotations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@CreationTimestamp"})}),": Automatically sets the timestamp when the record is created."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@UpdateTimestamp"})}),": Automatically updates the timestamp when the record is updated."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"JPA Annotations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@Entity"})}),": Marks this class as a JPA entity, which will map to a table in the database."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@Id"})}),": Marks the primary key of the entity."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@GeneratedValue"})}),": Specifies how the primary key should be generated (in this case, using ",(0,s.jsx)(n.code,{children:"GenerationType.AUTO"}),", which allows the persistence provider to choose the generation strategy)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Date Class"}),": The ",(0,s.jsx)(n.code,{children:"Date"})," class is used for storing timestamps (",(0,s.jsx)(n.code,{children:"createdAt"})," and ",(0,s.jsx)(n.code,{children:"updatedAt"}),")."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"3-class-level-annotations-and-declaration",children:["3. ",(0,s.jsx)(n.strong,{children:"Class-Level Annotations and Declaration:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Entity\n@Getter @Setter\npublic class CenterEntity {\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@Entity"})}),": This annotation specifies that this class is a JPA entity, meaning it will be mapped to a table in the database."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Lombok's ",(0,s.jsx)(n.code,{children:"@Getter"})," and ",(0,s.jsx)(n.code,{children:"@Setter"})]}),": Lombok generates getters and setters for all fields, reducing the need to manually define these methods."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"4-fields-and-annotations",children:["4. ",(0,s.jsx)(n.strong,{children:"Fields and Annotations:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@NonNull\n@Id\n@GeneratedValue(strategy = GenerationType.AUTO)\nprivate Long id;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@Id"})}),": Marks the ",(0,s.jsx)(n.code,{children:"id"})," field as the primary key."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@GeneratedValue(strategy = GenerationType.AUTO)"})}),": Specifies that the ",(0,s.jsx)(n.code,{children:"id"})," will be automatically generated. The ",(0,s.jsx)(n.code,{children:"AUTO"})," strategy allows the JPA provider (e.g., Hibernate) to decide the best way to generate the IDs."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@NonNull"})}),": Ensures that the ",(0,s.jsx)(n.code,{children:"id"})," is never null when assigned or used (applied at runtime by Lombok)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Other fields represent information related to the center:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"private String centerName;\nprivate String uuid;\nprivate String referenceNumber;\nprivate String state;\nprivate String address;\nprivate String town;\nprivate String status;\nprivate int capacity;\nprivate int backupCapacity;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"centerName"}),": Name of the center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"uuid"}),": Unique identifier for the center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"referenceNumber"}),": Some kind of reference identifier for the center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"state"}),": Represents the state or region where the center is located."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"address"}),": Full address of the center."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"town"}),": The town where the center is located."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"status"}),': Represents the status of the center (e.g., "Active", "Inactive").']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"capacity"}),": Represents the maximum number of participants the center can accommodate."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"backupCapacity"}),": Represents backup or emergency capacity for the center."]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"5-automatic-timestamps",children:["5. ",(0,s.jsx)(n.strong,{children:"Automatic Timestamps:"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@CreationTimestamp\nprivate Date createdAt;\n\n@UpdateTimestamp\nprivate Date updatedAt;\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@CreationTimestamp"})}),": Automatically sets the value of ",(0,s.jsx)(n.code,{children:"createdAt"})," to the current timestamp when the entity is first persisted."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"@UpdateTimestamp"})}),": Automatically updates the ",(0,s.jsx)(n.code,{children:"updatedAt"})," timestamp whenever the entity is updated."]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);