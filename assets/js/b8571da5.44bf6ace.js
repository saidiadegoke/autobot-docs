"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[6128],{3099:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>d,toc:()=>a});var i=n(4848),t=n(8453);const o={},r=void 0,d={id:"autobot-admin/exam-package/repositories",title:"repositories",description:"Documentation for Repositories",source:"@site/docs/autobot-admin/exam-package/repositories.md",sourceDirName:"autobot-admin/exam-package",slug:"/autobot-admin/exam-package/repositories",permalink:"/autobot-docs/docs/autobot-admin/exam-package/repositories",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/exam-package/repositories.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"other-controllers",permalink:"/autobot-docs/docs/autobot-admin/exam-package/other-controllers"},next:{title:"utilities",permalink:"/autobot-docs/docs/autobot-admin/exam-package/utilities"}},c={},a=[{value:"Documentation for Repositories",id:"documentation-for-repositories",level:3},{value:"<strong><code>ExamDefaultRepository</code></strong>",id:"examdefaultrepository",level:3},{value:"Key Inheritance:",id:"key-inheritance",level:4},{value:"<strong><code>ExamSessionNodeRepository</code></strong>",id:"examsessionnoderepository",level:3},{value:"Key Methods:",id:"key-methods",level:4},{value:"Key Annotations:",id:"key-annotations",level:4},{value:"<strong><code>ExamSessionRepository</code></strong>",id:"examsessionrepository",level:3},{value:"Key Methods:",id:"key-methods-1",level:4},{value:"Key Annotations:",id:"key-annotations-1",level:4},{value:"Summary:",id:"summary",level:3}];function l(e){const s={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h3,{id:"documentation-for-repositories",children:"Documentation for Repositories"}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"examdefaultrepository",children:(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"ExamDefaultRepository"})})}),"\n",(0,i.jsxs)(s.p,{children:["This repository interface extends ",(0,i.jsx)(s.code,{children:"JpaRepository"})," and ",(0,i.jsx)(s.code,{children:"JpaSpecificationExecutor"})," to provide CRUD operations and specification-based querying for the ",(0,i.jsx)(s.code,{children:"ExamDefaultEntity"}),"."]}),"\n",(0,i.jsx)(s.h4,{id:"key-inheritance",children:"Key Inheritance:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"JpaRepository<ExamDefaultEntity, Long>"})}),": Provides basic CRUD operations like ",(0,i.jsx)(s.code,{children:"save"}),", ",(0,i.jsx)(s.code,{children:"findById"}),", ",(0,i.jsx)(s.code,{children:"findAll"}),", ",(0,i.jsx)(s.code,{children:"delete"}),", etc., for ",(0,i.jsx)(s.code,{children:"ExamDefaultEntity"}),". The primary key type is ",(0,i.jsx)(s.code,{children:"Long"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"JpaSpecificationExecutor<ExamDefaultEntity>"})}),": Allows the execution of queries using specifications, which enable complex queries based on criteria without writing explicit query methods."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"examsessionnoderepository",children:(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"ExamSessionNodeRepository"})})}),"\n",(0,i.jsxs)(s.p,{children:["This repository interface provides custom query methods and transactional updates for ",(0,i.jsx)(s.code,{children:"ExamSessionNodeEntity"}),". It handles operations related to exam session nodes, including querying by node and exam UUIDs, counting submissions, and updating node statuses."]}),"\n",(0,i.jsx)(s.h4,{id:"key-methods",children:"Key Methods:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findByExamUUID(String uuid)"})}),": Fetches the first ",(0,i.jsx)(s.code,{children:"ExamSessionNodeEntity"})," with a matching exam UUID."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findByNodeUUID(String uuid)"})}),": Fetches the first ",(0,i.jsx)(s.code,{children:"ExamSessionNodeEntity"})," with a matching node UUID."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findFirstByNodeUUID(String uuid)"})}),": Finds the first node by its UUID."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findByNodeUUIDAndExamUUID(String nodeUUID, String examUUID)"})}),": Fetches the node with matching ",(0,i.jsx)(s.code,{children:"nodeUUID"})," and ",(0,i.jsx)(s.code,{children:"examUUID"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"countAllByCpuUsageGreaterThan(int value)"})}),": Counts all nodes where CPU usage is greater than a specified value."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"countAllByStartStatusEquals(String value)"})}),": Counts nodes that have a specific start status."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findFirstByOrderBySubmissionCountDesc()"})}),": Finds the node with the highest submission count."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"updateAllSetConnectedStatusWhereSubmissionCountLessThan(String status, int submissionCount)"})}),": Updates the connected status for nodes where the submission count is less than the given value."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"updateAllSetConnectedStatusWhereUpdatedAtLessThan(String status, Date updatedAt)"})}),": Updates the connected status for nodes that haven\u2019t been updated since a given timestamp."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"key-annotations",children:"Key Annotations:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Transactional"})}),": Ensures that multiple operations within a method are executed in a single transaction."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Modifying"})}),": Marks query methods that modify data (e.g., ",(0,i.jsx)(s.code,{children:"UPDATE"})," or ",(0,i.jsx)(s.code,{children:"DELETE"})," queries)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Query"})}),": Allows writing custom SQL or JPQL queries for specific operations (e.g., updating node connection status)."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"examsessionrepository",children:(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"ExamSessionRepository"})})}),"\n",(0,i.jsxs)(s.p,{children:["This repository interface provides methods to interact with ",(0,i.jsx)(s.code,{children:"ExamSessionEntity"}),", including querying for specific exam sessions, marking exams as completed, and updating or closing open exams."]}),"\n",(0,i.jsx)(s.h4,{id:"key-methods-1",children:"Key Methods:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findByExamUUID(String uuid)"})}),": Fetches the exam session by its UUID."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findFirstByStatus(String status)"})}),": Fetches the first exam session with a given status."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"findFirstByOrderByIdDesc()"})}),": Fetches the most recently created exam session."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"saveAndFlush(ExamSessionEntity entity)"})}),": Saves the entity and immediately flushes changes to the database."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"updateOlderExamsDisconnectCount()"})}),": Sets the ",(0,i.jsx)(s.code,{children:"disconnectedNodes"})," count to zero for older exams where the value is null."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"updateOlderExamsTerminateCount()"})}),": Sets the ",(0,i.jsx)(s.code,{children:"totalTerminated"})," count to zero for older exams where the value is null."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"closeAnyOpenExam()"})}),": Closes any exam session with a status of ",(0,i.jsx)(s.code,{children:"PENDING"})," or ",(0,i.jsx)(s.code,{children:"STARTED"})," by marking it as ",(0,i.jsx)(s.code,{children:"DISCONTINUED"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"markAsCompleted(String examUUID)"})}),": Updates the status of an exam to ",(0,i.jsx)(s.code,{children:"COMPLETED"})," based on its UUID."]}),"\n"]}),"\n",(0,i.jsx)(s.h4,{id:"key-annotations-1",children:"Key Annotations:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Transactional"})}),": Ensures that query methods are executed within a transaction."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Modifying"})}),": Marks query methods that modify data (e.g., ",(0,i.jsx)(s.code,{children:"UPDATE"})," queries)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"@Query"})}),": Allows the use of custom JPQL queries for specific operations, such as closing open exams or updating their statuses."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.h3,{id:"summary",children:"Summary:"}),"\n",(0,i.jsxs)(s.p,{children:["These repository interfaces extend ",(0,i.jsx)(s.code,{children:"JpaRepository"})," to provide basic CRUD operations and also contain custom queries for more complex use cases, such as updating connected statuses, counting submissions, and marking exam sessions as completed. The use of ",(0,i.jsx)(s.code,{children:"@Transactional"})," and ",(0,i.jsx)(s.code,{children:"@Modifying"})," ensures that database updates are handled safely and efficiently within transactions."]})]})}function h(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>d});var i=n(6540);const t={},o=i.createContext(t);function r(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);