"use strict";(self.webpackChunkdocs_spa=self.webpackChunkdocs_spa||[]).push([[5132],{6253:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var t=n(4848),i=n(8453);const o={},d=void 0,a={id:"autobot-admin/exam-package/exam-memory-impl",title:"exam-memory-impl",description:"Documentation for ExamServiceMemoryImpl",source:"@site/docs/autobot-admin/exam-package/exam-memory-impl.md",sourceDirName:"autobot-admin/exam-package",slug:"/autobot-admin/exam-package/exam-memory-impl",permalink:"/autobot-docs/docs/autobot-admin/exam-package/exam-memory-impl",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/autobot-admin/exam-package/exam-memory-impl.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"exam-controller",permalink:"/autobot-docs/docs/autobot-admin/exam-package/exam-controller"},next:{title:"exam-service",permalink:"/autobot-docs/docs/autobot-admin/exam-package/exam-service"}},r={},l=[{value:"Documentation for <code>ExamServiceMemoryImpl</code>",id:"documentation-for-examservicememoryimpl",level:3},{value:"<strong><code>ExamServiceMemoryImpl</code> Class</strong>",id:"examservicememoryimpl-class",level:3},{value:"Key Dependencies:",id:"key-dependencies",level:4},{value:"Key Fields:",id:"key-fields",level:4},{value:"Core Methods:",id:"core-methods",level:3},{value:"<strong><code>ExamDefaultDTO getExamDefaultSettings()</code></strong>",id:"examdefaultdto-getexamdefaultsettings",level:4},{value:"<strong><code>NewExamResponseDTO createNewExam(NewExamRequestDTO newExamRequestDTO)</code></strong>",id:"newexamresponsedto-createnewexamnewexamrequestdto-newexamrequestdto",level:4},{value:"<strong><code>ExamSessionDTO startExam(String examUUID)</code></strong>",id:"examsessiondto-startexamstring-examuuid",level:4},{value:"<strong><code>ExamSessionDTO monitorExam(String examUUID)</code></strong>",id:"examsessiondto-monitorexamstring-examuuid",level:4},{value:"<strong><code>SimpleMessageDTO endExamByAdmin(String examUUID)</code></strong>",id:"simplemessagedto-endexambyadminstring-examuuid",level:4},{value:"<strong><code>ResponseMessage uploadExam(String examUUID)</code></strong>",id:"responsemessage-uploadexamstring-examuuid",level:4},{value:"<strong><code>ExamSessionDTO joinExam(JoinExamRequestDTO requestDTO)</code></strong>",id:"examsessiondto-joinexamjoinexamrequestdto-requestdto",level:4},{value:"<strong><code>SubmitAnswerResponseDTO submitAnswer(SubmitAnswerRequestDTO requestDTO)</code></strong>",id:"submitanswerresponsedto-submitanswersubmitanswerrequestdto-requestdto",level:4},{value:"<strong><code>SimpleMessageDTO submitExamByNode(SubmitAnswerRequestDTO requestDTO)</code></strong>",id:"simplemessagedto-submitexambynodesubmitanswerrequestdto-requestdto",level:4},{value:"<strong><code>void pulseCheck(PulseCheckDTO pulseCheckDTO)</code></strong>",id:"void-pulsecheckpulsecheckdto-pulsecheckdto",level:4},{value:"<strong><code>void updateOngoingExamSessionStatistics(String examUUID)</code></strong>",id:"void-updateongoingexamsessionstatisticsstring-examuuid",level:4},{value:"Scheduled Tasks:",id:"scheduled-tasks",level:3},{value:"<strong>Pulse Check Scheduler</strong>",id:"pulse-check-scheduler",level:4},{value:"<strong>Exam End Scheduler</strong>",id:"exam-end-scheduler",level:4},{value:"Utility Methods:",id:"utility-methods",level:3},{value:"<strong><code>updateExamSessionWithNodeList()</code></strong>",id:"updateexamsessionwithnodelist",level:4},{value:"<strong><code>updateNodeInCurrentExamsNodesList()</code></strong>",id:"updatenodeincurrentexamsnodeslist",level:4},{value:"<strong><code>getTotalNodesSubmittedStatus()</code></strong>",id:"gettotalnodessubmittedstatus",level:4},{value:"<strong><code>markNodesAsDisconnectedByUpdatedAt()</code></strong>",id:"marknodesasdisconnectedbyupdatedat",level:4},{value:"Summary:",id:"summary",level:3}];function c(e){const s={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h3,{id:"documentation-for-examservicememoryimpl",children:["Documentation for ",(0,t.jsx)(s.code,{children:"ExamServiceMemoryImpl"})]}),"\n",(0,t.jsxs)(s.p,{children:["The ",(0,t.jsx)(s.code,{children:"ExamServiceMemoryImpl"})," class implements the ",(0,t.jsx)(s.code,{children:"ExamService"})," interface, offering a memory-based alternative to manage exam sessions, client nodes, and pulse checks. This implementation stores exam session data and nodes in memory for efficient real-time updates and periodic synchronization with the database."]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"examservicememoryimpl-class",children:(0,t.jsxs)(s.strong,{children:[(0,t.jsx)(s.code,{children:"ExamServiceMemoryImpl"})," Class"]})}),"\n",(0,t.jsx)(s.h4,{id:"key-dependencies",children:"Key Dependencies:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"SimpMessagingTemplate"})}),": Facilitates WebSocket communication between the server, nodes, and admin."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsxs)(s.strong,{children:[(0,t.jsx)(s.code,{children:"ExamDefaultRepository"}),", ",(0,t.jsx)(s.code,{children:"ExamSessionRepository"}),", ",(0,t.jsx)(s.code,{children:"ExamSessionNodeRepository"}),", ",(0,t.jsx)(s.code,{children:"CenterRepository"}),", ",(0,t.jsx)(s.code,{children:"ClientNodeRepository"})]}),": Various repositories used for retrieving and persisting data related to exam sessions, default settings, and client nodes."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"AutobotClient"})}),": Used for sending requests and responses to an external server for tasks like uploading exam data."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"key-fields",children:"Key Fields:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"disconnectedUuidSet"})}),": Keeps track of client nodes that have disconnected during the exam."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"currentExamSessionDTO"})}),": Holds the current exam session details in memory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"currentExamsNodesList"})}),": A list that stores the current nodes participating in the exam."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"mapper"})}),": ObjectMapper used for JSON serialization and deserialization."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"executorService"})}),": Handles scheduled tasks such as pulse checks and timed exam closures."]}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"core-methods",children:"Core Methods:"}),"\n",(0,t.jsx)(s.h4,{id:"examdefaultdto-getexamdefaultsettings",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"ExamDefaultDTO getExamDefaultSettings()"})})}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the default settings for exams, including capacities, durations, and number of questions allowed. If no settings are found, it attempts to load them from the server."}),"\n",(0,t.jsx)(s.h4,{id:"newexamresponsedto-createnewexamnewexamrequestdto-newexamrequestdto",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"NewExamResponseDTO createNewExam(NewExamRequestDTO newExamRequestDTO)"})})}),"\n",(0,t.jsx)(s.p,{children:'Creates a new exam session after validating the provided request for capacity, duration, and number of questions. Ensures no other exam is running and updates any open sessions to "DISCONTINUED."'}),"\n",(0,t.jsx)(s.h4,{id:"examsessiondto-startexamstring-examuuid",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"ExamSessionDTO startExam(String examUUID)"})})}),"\n",(0,t.jsx)(s.p,{children:"Starts the specified exam session by:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Resetting connection statuses and clearing previously joined nodes."}),"\n",(0,t.jsx)(s.li,{children:"Setting the start and end times based on the session duration."}),"\n",(0,t.jsx)(s.li,{children:"Scheduling periodic tasks to monitor the session and automatically close it when the time expires."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Sends a start notification via WebSocket to inform all connected nodes."}),"\n",(0,t.jsx)(s.h4,{id:"examsessiondto-monitorexamstring-examuuid",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"ExamSessionDTO monitorExam(String examUUID)"})})}),"\n",(0,t.jsx)(s.p,{children:"Monitors an ongoing exam session, returning details about the exam session and all currently connected nodes."}),"\n",(0,t.jsx)(s.h4,{id:"simplemessagedto-endexambyadminstring-examuuid",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"SimpleMessageDTO endExamByAdmin(String examUUID)"})})}),"\n",(0,t.jsx)(s.p,{children:'Allows the admin to manually end an exam session. It updates the exam\'s status to "COMPLETED" and sends a notification to all connected nodes.'}),"\n",(0,t.jsx)(s.h4,{id:"responsemessage-uploadexamstring-examuuid",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"ResponseMessage uploadExam(String examUUID)"})})}),"\n",(0,t.jsx)(s.p,{children:"Uploads the results of the exam session to the server. If the exam session has already been uploaded, it throws an error. Also updates the center's reference number before uploading."}),"\n",(0,t.jsx)(s.h4,{id:"examsessiondto-joinexamjoinexamrequestdto-requestdto",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"ExamSessionDTO joinExam(JoinExamRequestDTO requestDTO)"})})}),"\n",(0,t.jsx)(s.p,{children:"Allows a client node to join the specified exam session by checking if:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"The exam UUID is valid."}),"\n",(0,t.jsx)(s.li,{children:"The node has already joined the exam."}),"\n",(0,t.jsx)(s.li,{children:"The exam session is not at capacity."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The node's details (e.g., registration number, IP address) are stored, and the total number of connected nodes is updated."}),"\n",(0,t.jsx)(s.h4,{id:"submitanswerresponsedto-submitanswersubmitanswerrequestdto-requestdto",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"SubmitAnswerResponseDTO submitAnswer(SubmitAnswerRequestDTO requestDTO)"})})}),"\n",(0,t.jsx)(s.p,{children:"Processes answer submissions from nodes by:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Incrementing the submission count for the node."}),"\n",(0,t.jsx)(s.li,{children:"Updating the node's resource usage (CPU, RAM)."}),"\n",(0,t.jsx)(s.li,{children:"Sending real-time updates to the admin via WebSocket."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"If the node has submitted all required answers, the system instructs it to submit the exam."}),"\n",(0,t.jsx)(s.h4,{id:"simplemessagedto-submitexambynodesubmitanswerrequestdto-requestdto",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"SimpleMessageDTO submitExamByNode(SubmitAnswerRequestDTO requestDTO)"})})}),"\n",(0,t.jsx)(s.p,{children:"Handles the submission of the entire exam by a node. It:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:'Marks the node\'s session as "ENDED."'}),"\n",(0,t.jsx)(s.li,{children:"Updates the submission status in real-time for the admin."}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"void-pulsecheckpulsecheckdto-pulsecheckdto",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"void pulseCheck(PulseCheckDTO pulseCheckDTO)"})})}),"\n",(0,t.jsx)(s.p,{children:"Performs a pulse check on a client node to ensure its connection is still active. If the node is found in the current exam, its connection status is updated."}),"\n",(0,t.jsx)(s.h4,{id:"void-updateongoingexamsessionstatisticsstring-examuuid",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"void updateOngoingExamSessionStatistics(String examUUID)"})})}),"\n",(0,t.jsx)(s.p,{children:"Periodically checks the connection status of all nodes and:"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:'Marks nodes that have not sent updates in the last 20 seconds as "NOT_CONNECTED."'}),"\n",(0,t.jsx)(s.li,{children:"Updates statistics related to the network failure and disconnection of nodes."}),"\n",(0,t.jsx)(s.li,{children:"Sends updates to the admin via WebSocket."}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"scheduled-tasks",children:"Scheduled Tasks:"}),"\n",(0,t.jsx)(s.h4,{id:"pulse-check-scheduler",children:(0,t.jsx)(s.strong,{children:"Pulse Check Scheduler"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Periodically checks the connection status of nodes during the exam."}),"\n",(0,t.jsx)(s.li,{children:"Disconnects nodes that have not sent updates in the last 20 seconds."}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"exam-end-scheduler",children:(0,t.jsx)(s.strong,{children:"Exam End Scheduler"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Automatically ends the exam when the session duration is completed."}),"\n",(0,t.jsx)(s.li,{children:"Sends an end notification to all connected nodes."}),"\n",(0,t.jsx)(s.li,{children:"Saves the exam session and node details to the database after the exam ends."}),"\n"]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"utility-methods",children:"Utility Methods:"}),"\n",(0,t.jsx)(s.h4,{id:"updateexamsessionwithnodelist",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"updateExamSessionWithNodeList()"})})}),"\n",(0,t.jsx)(s.p,{children:"Updates the exam session with the list of connected nodes and their current statuses."}),"\n",(0,t.jsx)(s.h4,{id:"updatenodeincurrentexamsnodeslist",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"updateNodeInCurrentExamsNodesList()"})})}),"\n",(0,t.jsx)(s.p,{children:"Updates a node's details in the memory-based list of exam session nodes."}),"\n",(0,t.jsx)(s.h4,{id:"gettotalnodessubmittedstatus",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"getTotalNodesSubmittedStatus()"})})}),"\n",(0,t.jsx)(s.p,{children:"Calculates the total number of nodes that have submitted the exam."}),"\n",(0,t.jsx)(s.h4,{id:"marknodesasdisconnectedbyupdatedat",children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.code,{children:"markNodesAsDisconnectedByUpdatedAt()"})})}),"\n",(0,t.jsx)(s.p,{children:'Marks nodes as "NOT_CONNECTED" if they haven\'t sent updates for a specified duration (e.g., 20 seconds).'}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{id:"summary",children:"Summary:"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"ExamServiceMemoryImpl"})," provides a real-time, memory-based implementation of managing exam sessions, client nodes, and communication. It supports dynamic pulse checks, submission handling, and periodic synchronization of exam data with the database."]})]})}function m(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>d,x:()=>a});var t=n(6540);const i={},o=t.createContext(i);function d(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);